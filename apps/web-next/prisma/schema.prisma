// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User roles for authorization
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  users User[]

  @@map("roles")
}

// User accounts
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  phone     String?
  isActive  Boolean  @default(true)
  emailVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Restrict)
  
  addresses Address[]
  orders    Order[]
  reviews   Review[]
  wishlists Wishlist[]
  refreshTokens RefreshToken[]
  cart      Cart?

  @@map("users")
}

// User addresses
model Address {
  id          String   @id @default(cuid())
  userId      String
  type        String   // 'billing' or 'shipping'
  firstName   String
  lastName    String
  company     String?
  addressLine1 String
  addressLine2 String?
  city        String
  state       String
  postalCode  String
  country     String
  phone       String?
  isDefault   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Orders that use this address
  billingOrders  Order[] @relation("BillingAddress")
  shippingOrders Order[] @relation("ShippingAddress")

  @@map("addresses")
}

// Product categories
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  slug        String   @unique
  parentId    String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Self-referencing relation for nested categories
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: SetNull)
  children Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

// Main products
model Product {
  id                String   @id @default(cuid())
  name              String
  slug              String   @unique
  description       String
  shortDescription  String?
  price             Decimal  @db.Decimal(10, 2)
  compareAtPrice    Decimal? @db.Decimal(10, 2)
  images            String[] // Array of image URLs
  category          String   // Simple string category
  tags              String[] // Array of tags
  isActive          Boolean  @default(true)
  isFeatured        Boolean  @default(false)
  isOnSale          Boolean  @default(false)
  salePercentage    Int?     // Percentage discount
  metadata          Json?    // Additional metadata
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relations
  variants       ProductVariant[]
  customizations ProductCustomization[]
  reviews        Review[]
  cartItems      CartItem[]
  orderItems     OrderItem[]
  wishlists      Wishlist[]

  @@map("products")
}



// Product variants (size, material, etc.)
model ProductVariant {
  id            String   @id @default(cuid())
  productId     String
  size          String?
  material      String?
  price         Decimal  @db.Decimal(10, 2)
  stockQuantity Int      @default(0)
  sku           String   @unique
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_variants")
}

// Product customizations (engraving, etc.)
model ProductCustomization {
  id               String   @id @default(cuid())
  productId        String
  attribute        String   // e.g., "Engraving Text", "Metal Type", "Ring Size"
  type             String   // e.g., "text", "image", "color", "select", "number"
  required         Boolean  @default(false)
  options          String[] // For select type: ["option1", "option2"]
  priceAdjustment  Decimal? @db.Decimal(10, 2)
  minValue         Int?     // For number type (e.g., ring size min)
  maxValue         Int?     // For number type (e.g., ring size max)
  maxLength        Int?     // For text type (e.g., engraving max chars)
  pattern          String?  // For text validation (e.g., regex pattern)
  helpText         String?  // Helper text for user guidance
  category         String?  // Category-specific customization (rings, earrings, etc.)
  isEnabled        Boolean  @default(true)
  sortOrder        Int      @default(0)
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  // Relations
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("product_customizations")
}

// Deals and promotions
model Deal {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String   // 'percentage', 'fixed', 'buy_one_get_one'
  value       Decimal  @db.Decimal(10, 2)
  minAmount   Decimal? @db.Decimal(10, 2)
  maxDiscount Decimal? @db.Decimal(10, 2)
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean  @default(true)
  usageLimit  Int?
  usedCount   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("deals")
}

// Shopping carts
model Cart {
  id        String   @id @default(cuid())
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items    CartItem[]

  @@map("carts")
}

// Cart items
model CartItem {
  id        String   @id @default(cuid())
  cartId    String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  customizations Json? // Store customization values
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  cart    Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@map("cart_items")
}

// Orders
model Order {
  id            String   @id @default(cuid())
  orderNumber   String   @unique
  userId        String
  status        String   @default("pending") // pending, processing, shipped, delivered, cancelled
  subtotal      Decimal  @db.Decimal(10, 2)
  taxAmount     Decimal  @db.Decimal(10, 2)
  shippingAmount Decimal @db.Decimal(10, 2)
  discountAmount Decimal @db.Decimal(10, 2) @default(0)
  totalAmount   Decimal  @db.Decimal(10, 2)
  billingAddressId  String
  shippingAddressId String
  notes         String?
  trackingNumber String?
  shippedAt     DateTime?
  deliveredAt   DateTime?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Stripe fields
  stripeSessionId String? // Stripe Checkout session ID
  paymentStatus   String? // e.g. 'pending', 'paid', 'failed'

  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Restrict)
  billingAddress  Address   @relation("BillingAddress", fields: [billingAddressId], references: [id], onDelete: Restrict)
  shippingAddress Address   @relation("ShippingAddress", fields: [shippingAddressId], references: [id], onDelete: Restrict)
  items           OrderItem[]

  @@map("orders")
}

// Order items
model OrderItem {
  id        String   @id @default(cuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  customizations Json? // Store customization values
  createdAt DateTime @default(now())

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Restrict)

  @@map("order_items")
}

// Wishlists
model Wishlist {
  id        String   @id @default(cuid())
  userId    String
  productId String
  createdAt DateTime @default(now())

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("wishlists")
}

// Product reviews
model Review {
  id        String   @id @default(cuid())
  userId    String
  productId String
  rating    Int      // 1-5 stars
  title     String?
  comment   String?
  isVerified Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([userId, productId])
  @@map("reviews")
}

// Refresh tokens for JWT authentication
model RefreshToken {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("refresh_tokens")
}
